// Date: 2025-06-20T04:35:18.3765339-05:00
//
// Simple passthrough fragment shader
//

// begin import shdMaths.fsh.__shady_export
int float_to_byte(float x) {
    return int(floor(clamp(x, 0.0, 1.0) * 255.0 + 0.5));
}
float byte_to_float(int x) {
    return clamp(float(x), 0.0, 255.0) / 255.0;
}
int imod(int x, int y) {
    return x - y * int(floor(float(x) / float(y)));
}
int bit_shift_left(int x, int n) {
    return int(float(x) * pow(2.0, float(n)));
}
int bit_shift_right(int x, int n) {
    return int(floor(float(x) / pow(2.0, float(n))));
}
int bitwise_and(int x, int mask) {
    return x - (x / (mask + 1)) * (mask + 1); // equivalent to x % (mask + 1) if mask is a power-of-two minus 1
}
int bitwise_and_of_pow2(int x, int pow2) {
    return imod(x, pow2);
}
int bitwise_or(int x, int y) {
    int result = 0;
    for (int i = 0; i < 8; ++i) {
        int bit = int(pow(2.0, float(i)));
        if (mod(float(x), float(2 * bit)) >= float(bit) ||
            mod(float(y), float(2 * bit)) >= float(bit)) {
            result += bit;
        }
    }
    return result;
}
int bitwise_xor(int x, int y) {
    int result = 0;
    for (int i = 0; i < 8; ++i) {
        int bit = int(pow(2.0, float(i)));
        bool a = mod(float(x), float(2 * bit)) >= float(bit);
        bool b = mod(float(y), float(2 * bit)) >= float(bit);
        if (a != b) {
            result += bit;
        }
    }
    return result;
}
int bitwise_not(int x, int bit_count) {
    return int(pow(2.0, float(bit_count)) - 1.0) - x;
}
int clamp(int v, int lower, int upper) {
	return (v < lower) ? lower : ((v > upper) ? upper : v);
}
float abs_float(float x) {
    return x < 0.0 ? -x : x;
}
int abs_int(int x) {
    return x < 0 ? -x : x;
}
float rand(vec2 p, float seed) {
    vec2 K1 = vec2(23.14069263277926, 2.665144142690225);
    p += vec2(seed, seed * 1.61803); // Golden twist
    return fract(cos(dot(p, K1)) * 12345.6789);
}
int irand(int max_val, vec2 p, float seed) {
    return int(floor(rand(p, seed) * float(max_val)));
}
bool chance(float probability, vec2 p, float seed) {
    return rand(p, seed) < probability;
}
float rand_range(float min_val, float max_val, vec2 p, float seed) {
    return mix(min_val, max_val, rand(p, seed));
}
int irand_range(int min_val, int max_val, vec2 p, float seed) {
    return min_val + irand(max_val - min_val + 1, p, seed);
}
int round(float x) {
    return int(floor(x + 0.5));
}
// end import shdMaths.fsh.__shady_export

struct ElemMeta {
    int id;
	ivec2 vel;
    int x_dir;
    int y_dir;
    int x_speed;
    int y_speed;
};

#region Element IDs Enum

#define Elem_Empty 0
#define Elem_Water 100
#define Elem_Sand 255

#endregion

#region Elem getter functions
int elem_get_index(vec4 px) {
    return int(floor(px.r * 255.0 + 0.5));
}

ivec2 elem_get_velocity(vec4 pixel) {
    int g = float_to_byte(pixel.g);
	
	
	// 0_00_0_00_00
    int y_dir   = bitwise_and(bit_shift_right(g, 7), 1);
    int y_speed = bitwise_and(bit_shift_right(g, 6), 3);
    int x_dir   = bitwise_and(bit_shift_right(g, 4), 1);
	int x_speed = bitwise_and(bit_shift_right(g, 2), 3);
    
    int vx = (x_dir == 1) ? x_speed : -x_speed;
    int vy = (y_dir == 1) ? y_speed : -y_speed;

    return ivec2(vx, vy);
}

int elem_get_xdir(vec4 pixel) {
    return bitwise_and(bit_shift_right(float_to_byte(pixel.g), 1), 1);
}

int elem_get_ydir(vec4 pixel) {
    return bitwise_and(bit_shift_right(float_to_byte(pixel.g), 5), 1);
}

int elem_get_xspeed(vec4 pixel) {
    return bitwise_and(bit_shift_right(float_to_byte(pixel.g), 2), 3);
}

int elem_get_yspeed(vec4 pixel) {
    return bitwise_and(bit_shift_right(float_to_byte(pixel.g), 6), 3);
}
#endregion

void unpack_pixel(vec4 pixel, inout ElemMeta metadata) {
    // Red
    metadata.id = elem_get_index(pixel);
    
    // Green
    int g = float_to_byte(pixel.g);

    // Layout: [y_dir (1)][y_speed (2)][x_dir (1)][x_speed (2)][? (2)]
    // Binary:  0_00_0_00_00

    metadata.y_dir   = bitwise_and(bit_shift_right(g, 7), 1);
    metadata.y_speed = bitwise_and(bit_shift_right(g, 5), 3);
    metadata.x_dir   = bitwise_and(bit_shift_right(g, 4), 1);
    metadata.x_speed = bitwise_and(bit_shift_right(g, 2), 3);

    metadata.vel = ivec2(
        (metadata.x_dir == 1) ? metadata.x_speed : -metadata.x_speed,
        (metadata.y_dir == 1) ? metadata.y_speed : -metadata.y_speed
    );

    // Reserved bits (placeholder examples):
    // int extra_2bit  = bitwise_and(g, 0x03);         // Last 2 bits as one field
    // int extra_bit0  = bitwise_and(bit_shift_right(g, 1), 1); // Bit 1
    // int extra_bit1  = bitwise_and(g, 1);            // Bit 0

    // Blue and Alpha unused for now
}

vec4 pack_pixel(in ElemMeta meta) {
    int g = 0;

    // Layout: [y_dir (1)][y_speed (2)][x_dir (1)][x_speed (2)][? (2)]
    // Binary:  0_00_0_00_00

    g = bitwise_or(g, bit_shift_left(clamp(meta.y_dir  , 0, 1), 7));
    g = bitwise_or(g, bit_shift_left(clamp(meta.y_speed, 0, 3), 5));
    g = bitwise_or(g, bit_shift_left(clamp(meta.x_dir  , 0, 1), 4));
    g = bitwise_or(g, bit_shift_left(clamp(meta.x_speed, 0, 3), 2));

    // Reserved bits (leave for future use):
    // g = bitwise_or(g, bit_shift_left(clamp(meta.extra_2bit, 0, 3), 0)); // One 2-bit field
    // g = bitwise_or(g, bit_shift_left(clamp(meta.extra_bit0, 0, 1), 1)); // Bit 1
    // g = bitwise_or(g, bit_shift_left(clamp(meta.extra_bit1, 0, 1), 0)); // Bit 0

    float g_float = byte_to_float(g);
    float r_float = byte_to_float(meta.id); // assuming ID lives in red
	
    return vec4(r_float, g_float, 0.0, 1.0);
}


// === Encode velocity (ivec2) into RG float pair (vec2)
// Maps signed int [-128,127] to float [0.0,1.0]
vec2 vel_to_rg(ivec2 vel) {
    return (vec2(vel) + 128.0) / 255.0;
}

// === Decode RG float pair (vec2) back into velocity (ivec2)
// Maps float [0.0,1.0] to signed int [-128,127]
ivec2 rg_to_vel(vec2 rg) {
    return ivec2(floor(rg * 255.0 + 0.5)) - 128;
}


































void main()
{
    //gl_FragColor = vec4(0.0);
}
