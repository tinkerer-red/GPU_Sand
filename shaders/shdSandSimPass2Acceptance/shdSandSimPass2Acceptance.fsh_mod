// Date: 2025-06-20T02:00:31.3881995-05:00
// begin import shdSandSimCommon.fsh.__shady_export
// begin import shdMaths.fsh.__shady_export
int float_to_byte(float x) {
    return int(floor(clamp(x, 0.0, 1.0) * 255.0 + 0.5));
}
float byte_to_float(int x) {
    return clamp(float(x), 0.0, 255.0) / 255.0;
}
int imod(int x, int y) {
    return x - y * int(floor(float(x) / float(y)));
}
int bit_shift_left(int x, int n) {
    return int(float(x) * pow(2.0, float(n)));
}
int bit_shift_right(int x, int n) {
    return int(floor(float(x) / pow(2.0, float(n))));
}
int bitwise_and(int x, int mask) {
    return x - (x / (mask + 1)) * (mask + 1); // equivalent to x % (mask + 1) if mask is a power-of-two minus 1
}
int bitwise_and_of_pow2(int x, int pow2) {
    return imod(x, pow2);
}
int bitwise_or(int x, int y) {
    int result = 0;
    for (int i = 0; i < 8; ++i) {
        int bit = int(pow(2.0, float(i)));
        if (mod(float(x), float(2 * bit)) >= float(bit) ||
            mod(float(y), float(2 * bit)) >= float(bit)) {
            result += bit;
        }
    }
    return result;
}
int bitwise_xor(int x, int y) {
    int result = 0;
    for (int i = 0; i < 8; ++i) {
        int bit = int(pow(2.0, float(i)));
        bool a = mod(float(x), float(2 * bit)) >= float(bit);
        bool b = mod(float(y), float(2 * bit)) >= float(bit);
        if (a != b) {
            result += bit;
        }
    }
    return result;
}
int bitwise_not(int x, int bit_count) {
    return int(pow(2.0, float(bit_count)) - 1.0) - x;
}
int clamp(int v, int lower, int upper) {
	return (v < lower) ? lower : ((v > upper) ? upper : v);
}
float abs_float(float x) {
    return x < 0.0 ? -x : x;
}
int abs_int(int x) {
    return x < 0 ? -x : x;
}
float rand(vec2 coord, float seed) {
    return fract(sin(dot(coord + seed, vec2(12.9898, 78.233))) * 43758.5453);
}
int round(float x) {
    return int(floor(x + 0.5));
}
// end import shdMaths.fsh.__shady_export
struct ElemMeta {
    int id;
	ivec2 vel;
    int x_dir;
    int y_dir;
    int x_speed;
    int y_speed;
};
#region Element IDs Enum
#define Elem_Empty 0
#define Elem_Water 100
#define Elem_Sand 255
#endregion
#region Elem getter functions
int elem_get_index(vec4 px) {
    return int(floor(px.r * 255.0 + 0.5));
}
ivec2 elem_get_velocity(vec4 pixel) {
    int g = float_to_byte(pixel.g);
    int y_dir   = bitwise_and(bit_shift_right(g, 7), 1);
    int y_speed = bitwise_and(bit_shift_right(g, 6), 3);
    int x_dir   = bitwise_and(bit_shift_right(g, 4), 1);
	int x_speed = bitwise_and(bit_shift_right(g, 2), 3);
    int vx = (x_dir == 1) ? x_speed : -x_speed;
    int vy = (y_dir == 1) ? y_speed : -y_speed;
    return ivec2(vx, vy);
}
int elem_get_xdir(vec4 pixel) {
    return bitwise_and(bit_shift_right(float_to_byte(pixel.g), 1), 1);
}
int elem_get_ydir(vec4 pixel) {
    return bitwise_and(bit_shift_right(float_to_byte(pixel.g), 5), 1);
}
int elem_get_xspeed(vec4 pixel) {
    return bitwise_and(bit_shift_right(float_to_byte(pixel.g), 2), 3);
}
int elem_get_yspeed(vec4 pixel) {
    return bitwise_and(bit_shift_right(float_to_byte(pixel.g), 6), 3);
}
#endregion
void unpack_pixel(vec4 pixel, inout ElemMeta metadata) {
    metadata.id = elem_get_index(pixel);
    int g = float_to_byte(pixel.g);
    metadata.y_dir   = bitwise_and(bit_shift_right(g, 7), 1);
    metadata.y_speed = bitwise_and(bit_shift_right(g, 5), 3);
    metadata.x_dir   = bitwise_and(bit_shift_right(g, 4), 1);
    metadata.x_speed = bitwise_and(bit_shift_right(g, 2), 3);
    metadata.vel = ivec2(
        (metadata.x_dir == 1) ? metadata.x_speed : -metadata.x_speed,
        (metadata.y_dir == 1) ? metadata.y_speed : -metadata.y_speed
    );
}
vec4 pack_pixel(in ElemMeta meta) {
    int g = 0;
    g = bitwise_or(g, bit_shift_left(clamp(meta.y_dir  , 0, 1), 7));
    g = bitwise_or(g, bit_shift_left(clamp(meta.y_speed, 0, 3), 5));
    g = bitwise_or(g, bit_shift_left(clamp(meta.x_dir  , 0, 1), 4));
    g = bitwise_or(g, bit_shift_left(clamp(meta.x_speed, 0, 3), 2));
    float g_float = byte_to_float(g);
    float r_float = byte_to_float(meta.id); // assuming ID lives in red
    return vec4(r_float, g_float, 0.0, 1.0);
}
vec2 vel_to_rg(ivec2 vel) {
    return (vec2(vel) + 128.0) / 255.0;
}
ivec2 rg_to_vel(vec2 rg) {
    return ivec2(floor(rg * 255.0 + 0.5)) - 128;
}
// end import shdSandSimCommon.fsh.__shady_export

#define OFFSET_RADIUS 3

varying vec2 v_vTexcoord;
varying vec4 v_vColour;

uniform vec2 u_texel_size;
uniform sampler2D gm_SecondaryTexture; // velocity surface (RG)

// Score movement priority by proximity
float compute_claim_score(vec2 offset) {
    return dot(offset, offset);
}

void main() {
    ElemMeta metadata;
	vec4 self_pixel = texture2D(gm_BaseTexture, v_vTexcoord);
    unpack_pixel(self_pixel, metadata);
	
	float best_score = 99999.0;
    ivec2 best_offset = ivec2(0);
	
    for (int oy = -OFFSET_RADIUS; oy <= OFFSET_RADIUS; ++oy) {
        for (int ox = -OFFSET_RADIUS; ox <= OFFSET_RADIUS; ++ox) {
            
			//skip self
			if (ox == 0 && oy == 0) continue;
			
            vec2 offset = vec2(float(ox), float(oy));
            vec2 neighbor_uv = v_vTexcoord + offset * u_texel_size;
			
			//skip out of bounds
            if (neighbor_uv.x < 0.0 || neighbor_uv.y < 0.0 ||
                neighbor_uv.x > 1.0 || neighbor_uv.y > 1.0) continue;
			
			
            vec4 vel_px   = texture2D(gm_SecondaryTexture, neighbor_uv);
			vec4 elem_px  = texture2D(gm_BaseTexture,      neighbor_uv);
			
			ElemMeta neighbor_metadata;
			unpack_pixel(elem_px, neighbor_metadata);
			
            ivec2 vel = rg_to_vel(vel_px.rg);
			
            // Is the neighbor trying to move into us?
            ivec2 offset_dir = ivec2(ox, oy);
			
			if (all(equal(-vel, offset_dir))) {
			    // === Permission check (custom element logic goes here)
			    bool accepted = false;
				
				//Use a while loop just so we can break out when we find a match and skip everything else
				while(true){
// begin import ElemSand.fsh.__shady_macro_ACCEPT
	if (metadata.id == Elem_Sand) {
		
		//currently sand doesnt accept anything else
		accepted = false;
		
		break;
	}
// end import ElemSand.fsh.__shady_macro_ACCEPT
					
					accepted = true;
					break;
				}
				
			    if (accepted) {
			        float score = compute_claim_score(offset);
			        if (score < best_score) {
			            best_score = score;
			            best_offset = offset_dir;
			        }
			    }
			}


        }
    }

    gl_FragColor = vec4(vel_to_rg(best_offset), 0.0, 1.0);
}
