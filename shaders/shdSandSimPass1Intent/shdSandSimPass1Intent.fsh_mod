// Date: 2025-06-22T05:38:37.7140982-05:00
// begin import shdSandSimCommon.fsh.__shady_export
// begin import shdMaths.fsh.__shady_export
#region Converters
int float_to_byte(float x) {
    return int(floor(clamp(x, 0.0, 1.0) * 255.0 + 0.5));
}
float byte_to_float(int x) {
    return clamp(float(x), 0.0, 255.0) / 255.0;
}
#endregion
int imod(int x, int y) {
    return x - y * int(floor(float(x) / float(y)));
}
#region Bitwise Ops
int bit_shift_left(int x, int n) {
    return int(float(x) * pow(2.0, float(n)));
}
int bit_shift_right(int x, int n) {
    return int(floor(float(x) / pow(2.0, float(n))));
}
int bitwise_and(int x, int mask) {
    return x - (x / (mask + 1)) * (mask + 1); // equivalent to x % (mask + 1) if mask is a power-of-two minus 1
}
int bitwise_and_of_pow2(int x, int pow2) {
    return imod(x, pow2);
}
int bitwise_or(int x, int y) {
    int result = 0;
    for (int i = 0; i < 8; ++i) {
        int bit = int(pow(2.0, float(i)));
        if (mod(float(x), float(2 * bit)) >= float(bit) ||
            mod(float(y), float(2 * bit)) >= float(bit)) {
            result += bit;
        }
    }
    return result;
}
int bitwise_xor(int x, int y) {
    int result = 0;
    for (int i = 0; i < 8; ++i) {
        int bit = int(pow(2.0, float(i)));
        bool a = mod(float(x), float(2 * bit)) >= float(bit);
        bool b = mod(float(y), float(2 * bit)) >= float(bit);
        if (a != b) {
            result += bit;
        }
    }
    return result;
}
int bitwise_not(int x, int bit_count) {
    return int(pow(2.0, float(bit_count)) - 1.0) - x;
}
#endregion
int clamp(int v, int lower, int upper) {
	return (v < lower) ? lower : ((v > upper) ? upper : v);
}
float abs_float(float x) {
    return x < 0.0 ? -x : x;
}
int abs_int(int x) {
    return x < 0 ? -x : x;
}
int sign_int(int x) {
    return (x > 0) ? 1 : ((x < 0) ? -1 : 0);
}
float sign_float(float x) {
    return (x > 0.0) ? 1.0 : ((x < 0.0) ? -1.0 : 0.0);
}
#region Random
float rand(vec2 p, float seed) {
    vec2 K1 = vec2(23.14069263277926, 2.665144142690225);
    p += vec2(seed, seed * 1.61803); // Golden twist
    return fract(cos(dot(p, K1)) * 12345.6789);
}
int irand(int max_val, vec2 p, float seed) {
    return int(floor(rand(p, seed) * float(max_val)));
}
bool chance(float probability, vec2 p, float seed) {
    return rand(p, seed) < probability;
}
float rand_range(float min_val, float max_val, vec2 p, float seed) {
    return mix(min_val, max_val, rand(p, seed));
}
int irand_range(int min_val, int max_val, vec2 p, float seed) {
    return min_val + irand(max_val - min_val + 1, p, seed);
}
int round(float x) {
    return int(floor(x + 0.5));
}
#endregion
// end import shdMaths.fsh.__shady_export
#region Data Structures
struct ElementStaticData {
	int id;						// The ID of the element
    float gravity_force;          // Gravity strength per frame (e.g., 0.25 = slow fall)
    float x_search;               // Horizontal movement range
    float y_search;               // Vertical movement range (in gravity direction)
	float max_vel_x;              // Maximum horizontal velocity
    float max_vel_y;              // Maximum vertical velocity
    float stickiness;             // Preference to clump (higher = more sticky)
    float inertial_resistance;    // Resistance to velocity decay
	float bounce_chance;          // Chance to bounce on hard landing (0.0 - 1.0)
	bool can_slip;               // 1 = can attempt diagonal fallback
    int mass;                     // Affects momentum transfer
    int friction_factor;          // How much friction affects motion
    int state_of_matter;            // 0 = empty, 1 = gas, 2 = liquid, 3 = solid
    int flammable;              // 1 = can ignite
    int heat_factor;            // Heat applied to neighbors
    int fire_damage;            // Damage per frame when ignited
    int explosion_resist;       // Resistance to explosion
    int explosion_radius;       // Radius if it explodes
    int lifespan;               // Frames before death (-1 = infinite)
    int replace_count;          // Number of element types this can move into
    int replace_ids[4];         // Element IDs it can replace
};
struct ElementDynamicData {
    int id;
	vec2 vel;
    int x_dir;
    int y_dir;
    int x_speed;
    int y_speed;
};
#endregion
#region Element IDs Enum
#define ELEM_ID_EMPTY 0
#define ELEM_ID_WATER 100
#define ELEM_ID_SAND 255
#endregion
#region Getter Functions
int elem_get_index(vec4 px) {
    return int(floor(px.r * 255.0 + 0.5));
}
#endregion
#region Element Static Data
ElementStaticData get_element_static_data(int id) {
    ElementStaticData elem_static_data;
	if (id == ELEM_ID_SAND) {
// begin import ElemSand.fsh.__shady_macro_DefineElementStaticData
	int sand_replace_ids[4];
	sand_replace_ids[0] = ELEM_ID_WATER;
	sand_replace_ids[1] = 0;
	sand_replace_ids[2] = 0;
	sand_replace_ids[3] = 0;
	
	
	ElementStaticData elem_static_data = ElementStaticData(
	    ELEM_ID_SAND, // The ID of the element
		
	    // Gravity and movement behavior
	    1.0,   // gravity_force         (constant gravity every frame)
	    1.0,   // x_search              (can move 1 cell left/right)
	    1.0,   // y_search              (can fall 1 cell per fallback)
	    2.0,   // max_vel_x             (caps horizontal speed)
	    3.0,   // max_vel_y             (caps vertical speed)
	    0.0,   // stickiness            (no clumping behavior)
	    1.0,   // inertial_resistance   (modest horizontal drag)
	    0.1,   // bounce_chance         (low chance of bouncing)
		true,  // can_slip              (can diagonally fallback)
	    
	    // Physical characteristics
	    150,    // mass                  (affects force transfer)
	    9,      // friction_factor       (how much to reduce movement when hitting)
	    3,      // state_of_matter       (3 = solid)
		
	    // Heat and flammability
	    0,      // flammable             (wonâ€™t ignite)
	    0,      // heat_factor           (does not apply heat)
	    0,      // fire_damage           (no fire damage)
		
	    // Explosive properties
	    1,      // explosion_resist      (mild resistance)
	    0,      // explosion_radius      (not explosive)
		
	    // Lifecycle
	    -1,     // lifespan              (infinite lifetime)
		
	    // Interaction rules
	    1,      // replace_count         (can only replace water)
	    sand_replace_ids // replace_ids[4]  (allowed replacement targets)
	);

	
// end import ElemSand.fsh.__shady_macro_DefineElementStaticData
		return elem_static_data;
    }
	return elem_static_data;
}
#endregion
#region Dynamic Data
ElementDynamicData ununpack_elem_dynamic_data(vec4 pixel) {
    ElementDynamicData elem_dynamic_data;
    elem_dynamic_data.id = elem_get_index(pixel);
    int g = float_to_byte(pixel.g);
    elem_dynamic_data.y_dir   = bitwise_and(bit_shift_right(g, 7), 1);
    elem_dynamic_data.y_speed = bitwise_and(bit_shift_right(g, 5), 3);
    elem_dynamic_data.x_dir   = bitwise_and(bit_shift_right(g, 4), 1);
    elem_dynamic_data.x_speed = bitwise_and(bit_shift_right(g, 2), 3);
    elem_dynamic_data.vel = vec2(
        (elem_dynamic_data.x_dir == 1) ? elem_dynamic_data.x_speed : -elem_dynamic_data.x_speed,
        (elem_dynamic_data.y_dir == 1) ? elem_dynamic_data.y_speed : -elem_dynamic_data.y_speed
    );
	return elem_dynamic_data;
}
vec4 pack_elem_dynamic_data(in ElementDynamicData elem_dynamic_data) {
    int g = 0;
    g = bitwise_or(g, bit_shift_left(clamp(elem_dynamic_data.y_dir  , 0, 1), 7));
    g = bitwise_or(g, bit_shift_left(clamp(elem_dynamic_data.y_speed, 0, 3), 5));
    g = bitwise_or(g, bit_shift_left(clamp(elem_dynamic_data.x_dir  , 0, 1), 4));
    g = bitwise_or(g, bit_shift_left(clamp(elem_dynamic_data.x_speed, 0, 3), 2));
    float g_float = byte_to_float(g);
    float r_float = byte_to_float(elem_dynamic_data.id); // assuming ID lives in red
    return vec4(r_float, g_float, 0.0, 1.0);
}
#endregion
#region is_* functions
bool elem_is_solid(ElementStaticData elem) {
    return elem.state_of_matter == 3;
}
bool elem_is_liquid(ElementStaticData elem) {
    return elem.state_of_matter == 2;
}
bool elem_is_gas(ElementStaticData elem) {
    return elem.state_of_matter == 1;
}
bool elem_is_empty(ElementStaticData elem) {
    return elem.state_of_matter == 0 || elem.id == ELEM_ID_EMPTY;
}
bool cell_is_solid(vec4 pixel) {
	return get_element_static_data(elem_get_index(pixel)).state_of_matter == 3;
}
bool cell_is_liquid(vec4 pixel) {
    return get_element_static_data(elem_get_index(pixel)).state_of_matter == 2;
}
bool cell_is_gas(vec4 pixel) {
    return get_element_static_data(elem_get_index(pixel)).state_of_matter == 1;
}
bool cell_is_empty(vec4 pixel) {
    return elem_get_index(pixel) == ELEM_ID_EMPTY || get_element_static_data(elem_get_index(pixel)).state_of_matter == 0;
}
#endregion
bool element_can_replace(ElementStaticData src, ElementStaticData dst) {
    if (dst.state_of_matter == 3) {
        return false;
    }
    if (dst.state_of_matter <= src.state_of_matter) {
        return true;
    }
    for (int i = 0; i < src.replace_count; ++i) {
        if (src.replace_ids[i] == dst.id) {
            return true;
        }
    }
    return false;
}
vec2 vel_to_rg(vec2 vel) {
    return (vec2(vel) + 128.0) / 255.0;
}
vec2 rg_to_vel(vec2 rg) {
    return vec2(floor(rg * 255.0 + 0.5)) - 128.0;
}
// end import shdSandSimCommon.fsh.__shady_export

varying vec2 v_vTexcoord;
varying vec4 v_vColour;

uniform vec2 u_texel_size;
uniform float u_frame;


void main() {
    vec4 self_pixel = texture2D(gm_BaseTexture, v_vTexcoord);
    ElementDynamicData elem_dynamic_data = ununpack_elem_dynamic_data(self_pixel);
	ElementStaticData elem_static_data = get_element_static_data(elem_dynamic_data.id);
	
    //Use a while loop just so we can break out when we find a match and skip everything else
	while(true){
// begin import ElemSand.fsh.__shady_macro_INTENT
	if (elem_dynamic_data.id == ELEM_ID_SAND) {
// begin import ElemSand.fsh.__shady_macro_DefineElementStaticData
	int sand_replace_ids[4];
	sand_replace_ids[0] = ELEM_ID_WATER;
	sand_replace_ids[1] = 0;
	sand_replace_ids[2] = 0;
	sand_replace_ids[3] = 0;
	
	
	ElementStaticData elem_static_data = ElementStaticData(
	    ELEM_ID_SAND, // The ID of the element
		
	    // Gravity and movement behavior
	    1.0,   // gravity_force         (constant gravity every frame)
	    1.0,   // x_search              (can move 1 cell left/right)
	    1.0,   // y_search              (can fall 1 cell per fallback)
	    2.0,   // max_vel_x             (caps horizontal speed)
	    3.0,   // max_vel_y             (caps vertical speed)
	    0.0,   // stickiness            (no clumping behavior)
	    1.0,   // inertial_resistance   (modest horizontal drag)
	    0.1,   // bounce_chance         (low chance of bouncing)
		true,  // can_slip              (can diagonally fallback)
	    
	    // Physical characteristics
	    150,    // mass                  (affects force transfer)
	    9,      // friction_factor       (how much to reduce movement when hitting)
	    3,      // state_of_matter       (3 = solid)
		
	    // Heat and flammability
	    0,      // flammable             (wonâ€™t ignite)
	    0,      // heat_factor           (does not apply heat)
	    0,      // fire_damage           (no fire damage)
		
	    // Explosive properties
	    1,      // explosion_resist      (mild resistance)
	    0,      // explosion_radius      (not explosive)
		
	    // Lifecycle
	    -1,     // lifespan              (infinite lifetime)
		
	    // Interaction rules
	    1,      // replace_count         (can only replace water)
	    sand_replace_ids // replace_ids[4]  (allowed replacement targets)
	);

	
// end import ElemSand.fsh.__shady_macro_DefineElementStaticData
		break;
	}
// end import ElemSand.fsh.__shady_macro_INTENT
		
		break;
	}
	
	#region Movement / Physics
    while (true) {
		// === Cache static fields for clarity ===
		float gravity_force       = elem_static_data.gravity_force;
		float x_search              = elem_static_data.x_search;
		float y_search              = elem_static_data.y_search;
		float max_vel_x             = elem_static_data.max_vel_x;
		float max_vel_y             = elem_static_data.max_vel_y;
		float stickiness            = elem_static_data.stickiness;
		float inertial_resist       = elem_static_data.inertial_resistance;
		float bounce_chance       = elem_static_data.bounce_chance;
		bool can_slip              = elem_static_data.can_slip;
		
		// === Apply Gravity Accumulator ===
		// (Assumes a float gravity accumulator system)
		elem_dynamic_data.vel.y = clamp(elem_dynamic_data.vel.y + gravity_force, -max_vel_y, max_vel_y);

		// === Air Resistance on X ===
		if (abs_float(elem_dynamic_data.vel.x) >= max_vel_x && inertial_resist > 0.0) {
			if (chance(0.2, v_vTexcoord + vec2(1.234, 4.567), u_frame)) {
				float dir = sign_float(elem_dynamic_data.vel.x);
				elem_dynamic_data.vel.x = clamp(elem_dynamic_data.vel.x - dir, -max_vel_x, max_vel_x);
				elem_dynamic_data.x_speed = int(abs_float(elem_dynamic_data.vel.x));
				elem_dynamic_data.x_dir = (dir > 0.0) ? 1 : 0;
			}
		}

		// === Attempt velocity-based movement ===
		if (abs_float(elem_dynamic_data.vel.x) > 1.0 || abs_float(elem_dynamic_data.vel.y) > 1.0) {
			vec2 vel_uv = v_vTexcoord + vec2(elem_dynamic_data.vel) * u_texel_size;
			vec4 vel_px = texture2D(gm_BaseTexture, vel_uv);
			int vel_id = elem_get_index(vel_px);
			ElementStaticData vel_static_data = get_element_static_data(vel_id);
			
			if (vel_id == 0 || element_can_replace(elem_static_data, vel_static_data)) {
				break; // Success: move into intended velocity cell
			}
			
			// === Bounce Logic ===
			if (chance(bounce_chance, v_vTexcoord + vec2(0.987, 0.321), u_frame)) {
				// === Sample 4-neighbor cells to estimate slope ===
				bool s_l = cell_is_solid(texture2D(gm_BaseTexture, v_vTexcoord + vec2(-1,  0) * u_texel_size));
				bool s_r = cell_is_solid(texture2D(gm_BaseTexture, v_vTexcoord + vec2( 1,  0) * u_texel_size));
				bool s_u = cell_is_solid(texture2D(gm_BaseTexture, v_vTexcoord + vec2( 0, -1) * u_texel_size));
				bool s_d = cell_is_solid(texture2D(gm_BaseTexture, v_vTexcoord + vec2( 0,  1) * u_texel_size));

				float g_x = float(s_r) - float(s_l);
				float g_y = float(s_d) - float(s_u);
				vec2 slope = vec2(g_x, g_y);

				if (length(slope) > 0.0) {
					vec2 v = vec2(elem_dynamic_data.vel);
					vec2 n = normalize(slope);
					vec2 bounce = v - 2.0 * dot(v, n) * n;

					// Dampen and add slight randomness
					float jitter = 0.9 + rand(v_vTexcoord, u_frame) * 0.15;
					bounce *= jitter;

					// Clamp and assign back to dynamic data
					bounce.x = clamp(bounce.x, -max_vel_x, max_vel_x);
					bounce.y = clamp(bounce.y, -max_vel_y, max_vel_y);

					elem_dynamic_data.vel = bounce;
					elem_dynamic_data.x_speed = int(abs_float(elem_dynamic_data.vel.x));
					elem_dynamic_data.x_dir   = (elem_dynamic_data.vel.x > 0.0) ? 1 : 0;
					elem_dynamic_data.y_speed = int(abs_float(elem_dynamic_data.vel.y));
					elem_dynamic_data.y_dir   = (elem_dynamic_data.vel.y > 0.0) ? 1 : 0;

					break; // Bounce intent issued
				}
			}
		}

		// === Fallback vertical search ===
		bool moved = false;
		float g_dir = sign_float(gravity_force);
		for (float dy = g_dir; abs_float(dy) <= y_search; dy += g_dir) {
			vec2 down_uv = v_vTexcoord + vec2(0.0, float(dy)) * u_texel_size;
			vec4 down_px = texture2D(gm_BaseTexture, down_uv);
			int down_id = elem_get_index(down_px);
			ElementStaticData down_static = get_element_static_data(down_id);

			if (down_id == 0 || element_can_replace(elem_static_data, down_static)) {
				elem_dynamic_data.vel = vec2(0.0, dy);
				moved = true;
				break;
			}
		}

		// === Fallback slip diagonally ===
		if (!moved && can_slip) {
			float dx = (rand(v_vTexcoord, u_frame) < 0.5) ? -1.0 : 1.0;
			for (float i = 1.0; i <= x_search; ++i) {
				vec2 diag_uv = v_vTexcoord + vec2(float(i * dx), g_dir) * u_texel_size;
				vec4 diag_px = texture2D(gm_BaseTexture, diag_uv);
				int diag_id = elem_get_index(diag_px);
				ElementStaticData diag_static = get_element_static_data(diag_id);

				if (diag_id == 0 || element_can_replace(elem_static_data, diag_static)) {
					elem_dynamic_data.vel = vec2(i * dx, g_dir);
					break;
				}
			}
		}
		
		break;
	}
	#endregion
	
	// Default to no movement
	gl_FragColor = vec4(vel_to_rg(elem_dynamic_data.vel), 0.0, 1.0);
}
