// Date: 2025-06-21T15:11:43.6178442-05:00
void main()
{
    
	//this is only here to prevent errors
	#ifdef EXCLUDE
	
	#region DefineElementStaticData
	#pragma shady: macro_begin DefineElementStaticData
	int sand_replace_ids[4];
	sand_replace_ids[0] = ELEM_ID_WATER;
	sand_replace_ids[1] = 0;
	sand_replace_ids[2] = 0;
	sand_replace_ids[3] = 0;
	
	
	ElementStaticData elem_static_data = ElementStaticData(
	    ELEM_ID_SAND, // The ID of the element
		
	    // Gravity and movement behavior
	    1.0,    // gravity_force         (constant gravity every frame)
	    1,      // x_search              (can move 1 cell left/right)
	    1,      // y_search              (can fall 1 cell per fallback)
	    2,      // max_vel_x             (caps horizontal speed)
	    3,      // max_vel_y             (caps vertical speed)
	    0,      // stickiness            (no clumping behavior)
	    1,      // can_slip              (can diagonally fallback)
	    1,      // inertial_resistance   (modest horizontal drag)
	    0.05,   // bounce_chance         (low chance of bouncing)
		
	    // Physical characteristics
	    150,    // mass                  (affects force transfer)
	    9,      // friction_factor       (how much to reduce movement when hitting)
	    5,      // stopped_moving_threshold (frames before considered stationary)
	    3,      // state_of_matter       (3 = solid)
		
	    // Heat and flammability
	    0,      // flammable             (won’t ignite)
	    0,      // heat_factor           (does not apply heat)
	    0,      // fire_damage           (no fire damage)
		
	    // Explosive properties
	    1,      // explosion_resist      (mild resistance)
	    0,      // explosion_radius      (not explosive)
		
	    // Lifecycle
	    -1,     // lifespan              (infinite lifetime)
		
	    // Interaction rules
	    1,      // replace_count         (can only replace water)
	    sand_replace_ids // replace_ids[4]  (allowed replacement targets)
	);

	
	#pragma shady: macro_end
	#endregion
	
	#region INTENT
	#pragma shady: macro_begin INTENT
	if (elem_dynamic_data.id == ELEM_ID_SAND) {
		
// begin import ElemSand.fsh.__shady_macro_DefineElementStaticData
	int sand_replace_ids[4];
	sand_replace_ids[0] = ELEM_ID_WATER;
	sand_replace_ids[1] = 0;
	sand_replace_ids[2] = 0;
	sand_replace_ids[3] = 0;
	
	
	ElementStaticData elem_static_data = ElementStaticData(
	    ELEM_ID_SAND, // The ID of the element
		
	    // Gravity and movement behavior
	    1.0,    // gravity_force         (constant gravity every frame)
	    1,      // x_search              (can move 1 cell left/right)
	    1,      // y_search              (can fall 1 cell per fallback)
	    2,      // max_vel_x             (caps horizontal speed)
	    3,      // max_vel_y             (caps vertical speed)
	    0,      // stickiness            (no clumping behavior)
	    1,      // can_slip              (can diagonally fallback)
	    1,      // inertial_resistance   (modest horizontal drag)
	    0.05,   // bounce_chance         (low chance of bouncing)
		
	    // Physical characteristics
	    150,    // mass                  (affects force transfer)
	    9,      // friction_factor       (how much to reduce movement when hitting)
	    5,      // stopped_moving_threshold (frames before considered stationary)
	    3,      // state_of_matter       (3 = solid)
		
	    // Heat and flammability
	    0,      // flammable             (won’t ignite)
	    0,      // heat_factor           (does not apply heat)
	    0,      // fire_damage           (no fire damage)
		
	    // Explosive properties
	    1,      // explosion_resist      (mild resistance)
	    0,      // explosion_radius      (not explosive)
		
	    // Lifecycle
	    -1,     // lifespan              (infinite lifetime)
		
	    // Interaction rules
	    1,      // replace_count         (can only replace water)
	    sand_replace_ids // replace_ids[4]  (allowed replacement targets)
	);

	
// end import ElemSand.fsh.__shady_macro_DefineElementStaticData
// begin import shdSandSimCommon.fsh.__shady_macro_GENERIC_INTENT

	// === Cache static fields for clarity ===
	float gravity_force       = elem_static_data.gravity_force;
	int x_search              = elem_static_data.x_search;
	int y_search              = elem_static_data.y_search;
	int max_vel_x             = elem_static_data.max_vel_x;
	int max_vel_y             = elem_static_data.max_vel_y;
	int stickiness            = elem_static_data.stickiness;
	int can_slip              = elem_static_data.can_slip;
	int inertial_resist       = elem_static_data.inertial_resistance;
	float bounce_chance       = elem_static_data.bounce_chance;

	// === Apply Gravity Accumulator ===
	// (Assumes a float gravity accumulator system)
	float accumulated_gravity = float(elem_dynamic_data.vel.y) + gravity_force;
	elem_dynamic_data.vel.y = clamp(int(round(accumulated_gravity)), -max_vel_y, max_vel_y);

	// === Air Resistance on X ===
	if (abs_int(elem_dynamic_data.vel.x) >= max_vel_x && inertial_resist > 0) {
		if (chance(0.2, v_vTexcoord + vec2(1.234, 4.567), u_frame)) {
			int dir = sign_int(elem_dynamic_data.vel.x);
			elem_dynamic_data.vel.x = clamp(elem_dynamic_data.vel.x - dir, -max_vel_x, max_vel_x);
			elem_dynamic_data.x_speed = abs_int(elem_dynamic_data.vel.x);
			elem_dynamic_data.x_dir = (dir > 0) ? 1 : 0;
		}
	}

	// === Attempt velocity-based movement ===
	if (elem_dynamic_data.vel.x != 0 || elem_dynamic_data.vel.y != 0) {
		vec2 vel_uv = v_vTexcoord + vec2(elem_dynamic_data.vel) * u_texel_size;
		vec4 vel_px = texture2D(gm_BaseTexture, vel_uv);
		int vel_id = elem_get_index(vel_px);
		ElementStaticData vel_static_data = get_element_static_data(vel_id);

		if (vel_id == 0 || element_can_replace(elem_static_data, vel_static_data)) {
			break; // Success: move into intended velocity cell
		}

		// === Bounce Logic ===
		if (chance(bounce_chance, v_vTexcoord + vec2(0.987, 0.321), u_frame)) {
			// === Sample 4-neighbor cells to estimate slope ===
			bool s_l = cell_is_solid(texture2D(gm_BaseTexture, v_vTexcoord + vec2(-1,  0) * u_texel_size));
			bool s_r = cell_is_solid(texture2D(gm_BaseTexture, v_vTexcoord + vec2( 1,  0) * u_texel_size));
			bool s_u = cell_is_solid(texture2D(gm_BaseTexture, v_vTexcoord + vec2( 0, -1) * u_texel_size));
			bool s_d = cell_is_solid(texture2D(gm_BaseTexture, v_vTexcoord + vec2( 0,  1) * u_texel_size));

			float g_x = float(s_r) - float(s_l);
			float g_y = float(s_d) - float(s_u);
			vec2 slope = vec2(g_x, g_y);

			if (length(slope) > 0.0) {
				vec2 v = vec2(elem_dynamic_data.vel);
				vec2 n = normalize(slope);
				vec2 bounce = v - 2.0 * dot(v, n) * n;

				// Dampen and add slight randomness
				float jitter = 0.9 + rand(v_vTexcoord, u_frame) * 0.15;
				bounce *= jitter;

				// Clamp and assign back to dynamic data
				bounce.x = clamp(bounce.x, -float(max_vel_x), float(max_vel_x));
				bounce.y = clamp(bounce.y, -float(max_vel_y), float(max_vel_y));

				elem_dynamic_data.vel = ivec2(bounce);
				elem_dynamic_data.x_speed = abs_int(elem_dynamic_data.vel.x);
				elem_dynamic_data.x_dir   = (elem_dynamic_data.vel.x > 0) ? 1 : 0;
				elem_dynamic_data.y_speed = abs_int(elem_dynamic_data.vel.y);
				elem_dynamic_data.y_dir   = (elem_dynamic_data.vel.y > 0) ? 1 : 0;

				break; // Bounce intent issued
			}
		}
	}

	// === Fallback vertical search ===
	bool moved = false;
	int g_dir = sign_int(int(gravity_force));
	for (int dy = g_dir; abs_int(dy) <= y_search; dy += g_dir) {
		vec2 down_uv = v_vTexcoord + vec2(0.0, float(dy)) * u_texel_size;
		vec4 down_px = texture2D(gm_BaseTexture, down_uv);
		int down_id = elem_get_index(down_px);
		ElementStaticData down_static = get_element_static_data(down_id);

		if (down_id == 0 || element_can_replace(elem_static_data, down_static)) {
			elem_dynamic_data.vel = ivec2(0, dy);
			moved = true;
			break;
		}
	}

	// === Fallback slip diagonally ===
	if (!moved && can_slip == 1) {
		int dx = (rand(v_vTexcoord, u_frame) < 0.5) ? -1 : 1;
		for (int i = 1; i <= x_search; ++i) {
			vec2 diag_uv = v_vTexcoord + vec2(float(i * dx), g_dir) * u_texel_size;
			vec4 diag_px = texture2D(gm_BaseTexture, diag_uv);
			int diag_id = elem_get_index(diag_px);
			ElementStaticData diag_static = get_element_static_data(diag_id);

			if (diag_id == 0 || element_can_replace(elem_static_data, diag_static)) {
				elem_dynamic_data.vel = ivec2(i * dx, g_dir);
				break;
			}
		}
	}

// end import shdSandSimCommon.fsh.__shady_macro_GENERIC_INTENT
		
	    break;
	}
	#pragma shady: macro_end
	#endregion
	
	#region ACCEPT
	#pragma shady: macro_begin ACCEPT
	if (elem_dynamic_data.id == ELEM_ID_SAND) {
		
		//currently sand doesnt accept anything else
		accepted = false;
		
		break;
	}
	#pragma shady: macro_end
	#endregion
	
	#endif
}
