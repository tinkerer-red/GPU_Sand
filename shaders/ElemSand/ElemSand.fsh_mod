// Date: 2025-06-21T05:50:30.1805761-05:00
void main()
{
    
	//this is only here to prevent errors
	#ifdef EXCLUDE
	
	#region DefineElementStaticData
	#pragma shady: macro_begin DefineElementStaticData
	int sand_replace_ids[4];
	sand_replace_ids[0] = ELEM_ID_WATER;
	sand_replace_ids[1] = 0;
	sand_replace_ids[2] = 0;
	sand_replace_ids[3] = 0;
	
	
	ElementStaticData elem_static_data = ElementStaticData(
		ELEM_ID_SAND, //ID
		
	    // Gravity and movement behavior
	    1,      // gravity_dir
	    1,      // x_search
	    1,      // y_search
	    0,      // stickiness
	    1,      // can_slip
	    1,      // inertial_resistance

	    // Physical characteristics
	    150,    // mass
	    9,      // friction_factor
	    5,      // stopped_moving_threshold
	    3,      // state_of_matter (solid)

	    // Heat and flammability
	    0,      // flammable
	    0,      // heat_factor
	    0,      // fire_damage

	    // Explosive properties
	    1,      // explosion_resist
	    0,      // explosion_radius

	    // Lifecycle
	    -1,     // lifespan

	    // Interaction rules
	    1,      // replace_count
	    sand_replace_ids
	);
	
	#pragma shady: macro_end
	#endregion
	
	#region INTENT
	#pragma shady: macro_begin INTENT
	if (elem_dynamic_data.id == ELEM_ID_SAND) {
		
// begin import ElemSand.fsh.__shady_macro_DefineElementStaticData
	int sand_replace_ids[4];
	sand_replace_ids[0] = ELEM_ID_WATER;
	sand_replace_ids[1] = 0;
	sand_replace_ids[2] = 0;
	sand_replace_ids[3] = 0;
	
	
	ElementStaticData elem_static_data = ElementStaticData(
		ELEM_ID_SAND, //ID
		
	    // Gravity and movement behavior
	    1,      // gravity_dir
	    1,      // x_search
	    1,      // y_search
	    0,      // stickiness
	    1,      // can_slip
	    1,      // inertial_resistance

	    // Physical characteristics
	    150,    // mass
	    9,      // friction_factor
	    5,      // stopped_moving_threshold
	    3,      // state_of_matter (solid)

	    // Heat and flammability
	    0,      // flammable
	    0,      // heat_factor
	    0,      // fire_damage

	    // Explosive properties
	    1,      // explosion_resist
	    0,      // explosion_radius

	    // Lifecycle
	    -1,     // lifespan

	    // Interaction rules
	    1,      // replace_count
	    sand_replace_ids
	);
	
// end import ElemSand.fsh.__shady_macro_DefineElementStaticData
// begin import shdSandSimCommon.fsh.__shady_macro_GENERIC_INTENT
	
	// Read once for clarity
	int grav_dir         = elem_static_data.gravity_dir;
	int x_search         = elem_static_data.x_search;
	int y_search         = elem_static_data.y_search;
	int can_slip         = elem_static_data.can_slip;
	int stickiness       = elem_static_data.stickiness;
	int inertial_resist  = elem_static_data.inertial_resistance;
	
	if (elem_dynamic_data.vel.x != 0 || elem_dynamic_data.vel.y != 0) {
	    // === AIR RESISTANCE ===
	    if (abs_int(elem_dynamic_data.vel.x) == 3 && inertial_resist > 0) {
	        if (chance(0.2, v_vTexcoord + vec2(1.234, 4.567), u_frame)) {
	            int dir = sign_int(elem_dynamic_data.vel.x);
	            elem_dynamic_data.vel.x = 2 * dir;
	            elem_dynamic_data.x_speed = 2;
	            elem_dynamic_data.x_dir = (dir > 0) ? 1 : 0;
	        }
	    }
		
	    // === ATTEMPT VELOCITY MOVE ===
	    vec2 fall_uv = v_vTexcoord + vec2(elem_dynamic_data.vel) * u_texel_size;
	    vec4 fall_px = texture2D(gm_BaseTexture, fall_uv);
	    int fall_id = elem_get_index(fall_px);
		
	    ElementStaticData dst_static_data = get_element_static_data(fall_id);
		
	    if (fall_id == 0 || element_can_replace(elem_static_data, dst_static_data)) {
	        if (chance(0.1, v_vTexcoord + vec2(0.456, 0.789), u_frame)) {
	            elem_dynamic_data.vel.y = clamp(elem_dynamic_data.vel.y + grav_dir, -3, 3);
	        }
	        break;
	    }
	}
	
	// === FALLBACK SEARCH ===
	bool moved = false;
	
	for (int dy = grav_dir; abs_int(dy) <= y_search; dy += grav_dir) {
	    vec2 down_uv = v_vTexcoord + vec2(0.0, float(dy)) * u_texel_size;
	    vec4 down_px = texture2D(gm_BaseTexture, down_uv);
	    int down_id = elem_get_index(down_px);
	    ElementStaticData down_static = get_element_static_data(down_id);
		
	    if (down_id == 0 || element_can_replace(elem_static_data, down_static)) {
	        elem_dynamic_data.vel = ivec2(0, dy);
	        moved = true;
	        break;
	    }
	}
	
	if (!moved && can_slip == 1) {
	    int dx = (rand(v_vTexcoord, u_frame) < 0.5) ? -1 : 1;
		
	    for (int i = 1; i <= x_search; ++i) {
	        vec2 diag_uv = v_vTexcoord + vec2(float(i * dx), grav_dir) * u_texel_size;
	        vec4 diag_px = texture2D(gm_BaseTexture, diag_uv);
	        int diag_id = elem_get_index(diag_px);
	        ElementStaticData diag_static = get_element_static_data(diag_id);
			
	        if (diag_id == 0 || element_can_replace(elem_static_data, diag_static)) {
	            elem_dynamic_data.vel = ivec2(i * dx, grav_dir);
	            break;
	        }
	    }
	}
	
// end import shdSandSimCommon.fsh.__shady_macro_GENERIC_INTENT
		
	    break;
	}
	#pragma shady: macro_end
	#endregion
	
	#region ACCEPT
	#pragma shady: macro_begin ACCEPT
	if (elem_dynamic_data.id == ELEM_ID_SAND) {
		
		//currently sand doesnt accept anything else
		accepted = false;
		
		break;
	}
	#pragma shady: macro_end
	#endregion
	
	#endif
}
